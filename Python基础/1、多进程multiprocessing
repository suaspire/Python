############################################################
import multiprocessing as mp
def job(q):
    res = 0
    for i in range(1000):
        res += i + i**2 + i**3
    q.put(res)

if __name__ == '__main__':
    q = mp.Queue()
    m1 = mp.Process(target=job,args=(q,))
    m2 = mp.Process(target=job,args=(q,))
    m1.start()
    m2.start()
    m1.join()
    m2.join()
    res1 = q.get()
    res2 = q.get()
    print('res1',res1)
    print('res2',res2)
#####################################################################
import multiprocessing
import threading
import time

def job(q):
    res = 0
    for i in range(1000000):
        res += i + i**2 + i**3
    q.put(res)

def multiprocess():
    q = multiprocessing.Queue()
    m1 = multiprocessing.Process(target=job,args=(q,))
    m2 = multiprocessing.Process(target=job, args=(q,))
    m1.start()
    m2.start()
    m1.join()
    m2.join()
    res1 = q.get()
    res2 = q.get()
    print(res1+res2)
def multithread():
    q = multiprocessing.Queue()
    t1 = threading.Thread(target=job, args=(q,))
    t2 = threading.Thread(target=job, args=(q,))
    t1.start()
    t2.start()
    t1.join()
    t2.join()
    res1 = q.get()
    res2 = q.get()
    print(res1 + res2)
def normal():
    res = 0
    for i in range(2):
        for j in range(1000000):
            res += j + j**2 + j**3
    print('normal:',res)
if __name__ == '__main__':
    st = time.time()
    normal()
    st1 = time.time()
    print('normal time:',st1 - st)
    multithread()
    st2 = time.time()
    print('multithread time:',st2 - st1)
    multiprocess()
    st3 = time.time()
    print('multiprocess time:',st3 - st2)

############################################################
import multiprocessing as mp

def job(x):
    return x*x
def multicore():
    pool = mp.Pool(processes=2) #指定两个核为该进程
    res = pool.map(job,range(10))
    print(res)
    res = pool.apply_async(job,(2,))
    print(res.get())
    multi_res = [pool.apply_async(job,(i,)) for i in range(10)]
    print([res.get() for res in multi_res])

if __name__ == '__main__':
    multicore()
############################################################
import multiprocessing
import time
def job(value,num,lock):
    lock.acquire()
    for i in range(10):
        time.sleep(0.1)
        value.value += num
        print(value.value)
    lock.release()

def multicore():
    value = multiprocessing.Value('i',0)
    lock = multiprocessing.Lock()
    m1 = multiprocessing.Process(target=job,args=(value,1,lock))
    m2 = multiprocessing.Process(target=job,args=(value,3,lock))
    m1.start()
    m2.start()
    m1.join()
    m2.join()

if __name__ == '__main__':
    multicore()
